spring:
  config:
    import: optional:file:.env[.properties]

  application:
    name: "Book Recommendation System"
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        default_schema: book_recommendation_system
        format_sql: true
    show-sql: true
    open-in-view: true

  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
            scope: public_profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/facebook"
        provider:
          facebook:
            authorization-uri: https://www.facebook.com/v20.0/dialog/oauth
            token-uri: https://graph.facebook.com/v20.0/oauth/access_token
            user-info-uri: https://graph.facebook.com/me?fields=id,name,email,picture
            user-name-attribute: id

  servlet:
    multipart:
      enabled: true
      max-file-size: 25MB
      max-request-size: 30MB
      file-size-threshold: 2MB

api:
  prefix: /api/v1
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173}
auth:
  token:
    jwtSecret: ${JWT_SECRET}
    accessExpirationInMils: ${ACCESS_EXPIRATION_IN_MILS} # 2h
app:
  oauth2:
    redirectUri: ${OAUTH2_REDIRECT_URI:http://localhost:5173/oauth2/success}
    failureRedirectUri: ${OAUTH2_FAILURE_REDIRECT_URI:http://localhost:5173/oauth2/error}
  auth:
    verification-url: ${APP_AUTH_VERIFICATION_URL:http://localhost:8080/api/v1/auth/verify-email?token=}
    reset-password-url: ${APP_AUTH_RESET_PASSWORD_URL:http://localhost:5173/reset-password?token=}

file:
  upload-dir: ${FILE_UPLOAD_DIR:${user.dir}/book-recommendation-uploads/books}
  allowed-extensions: pdf,docx,doc
  max-size-mb: 25

cloudinary:
  cloudName: ${CLOUDINARY_CLOUD_NAME}
  apiKey: ${CLOUDINARY_API_KEY}
  apiSecret: ${CLOUDINARY_API_SECRET}
  apiSecure: ${CLOUDINARY_API_SECURE:true}

minio:
  endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
  access-key: ${MINIO_ACCESS_KEY:admin}
  secret-key: ${MINIO_SECRET_KEY:12345678}
  bucket-name: ${MINIO_BUCKET_NAME:book-files}
  public-endpoint: ${MINIO_PUBLIC_ENDPOINT:}
  presigned-expiry-seconds: ${MINIO_PRESIGNED_EXPIRY_SECONDS:3600}

logging:
  level:
    #    org.hibernate.SQL: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
#    org.hibernate.engine.jdbc.spi.SqlExceptionHelper: WARN
#    com.zaxxer.hikari: INFO
#    org.hibernate.orm.connections.pooling: WARN
#    org.springframework.jdbc.datasource.DataSourceUtils: INFO
